<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ /*
  ~  * ******************************************************************************
  ~  *  * Copyright (c) 2020 CertifAI Sdn. Bhd.
  ~  *  *
  ~  *  * This program and the accompanying materials are made available under the
  ~  *  * terms of the Apache License, Version 2.0 which is available at
  ~  *  * https://www.apache.org/licenses/LICENSE-2.0.
  ~  *  *
  ~  *  * Unless required by applicable law or agreed to in writing, software
  ~  *  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  ~  *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  ~  *  * License for the specific language governing permissions and limitations
  ~  *  * under the License.
  ~  *  *
  ~  *  * SPDX-License-Identifier: Apache-2.0
  ~  *  *****************************************************************************
  ~  */
  ~
  -->


<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <groupId>ai.certifai</groupId>
    <artifactId>my-first-dl4j-project</artifactId>
    <packaging>pom</packaging>
    <modelVersion>4.0.0</modelVersion>
    <version>1.0-SNAPSHOT</version>

<!--    <name>my-first-dl4j-project</name>-->
<!--    <url>http://www.certifai.ai</url>-->
    <name>Training Labs Parent</name>
    <description>Hands on labs training</description>

    <properties>
        <!-- Change the nd4j.backend property to nd4j-cuda-*.*-platform example: nd4j-cuda-10.0-platform to use CUDA GPUs -->
        <nd4j.backend>nd4j-native-platform</nd4j.backend>
        <!-- Change the dl4j.cuda.backend property to deeplearning4j-cuda-*.*-platform example: deeplearning4j-cuda-10.0 to use CuDNN -->
        <dl4j.cuda.backend>deeplearning4j-cuda-10.0</dl4j.cuda.backend>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <dl4j.version>1.0.0-beta6</dl4j.version>
        <nd4j.version>1.0.0-beta6</nd4j.version>
        <zip4j.version>2.2.6</zip4j.version>
        <slf4j.version>2.0.0-alpha1</slf4j.version>
        <maven-shade-plugin.version>2.4.3</maven-shade-plugin.version>

        <maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
        <exec-maven-plugin.version>1.4.0</exec-maven-plugin.version>
        <maven.minimum.version>3.3.1</maven.minimum.version>
        <httpclient.version>4.5.12</httpclient.version>
        <javafx.version>2.2.3</javafx.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.nd4j</groupId>
                <artifactId>nd4j-native-platform</artifactId>
                <version>${nd4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.nd4j</groupId>
                <artifactId>nd4j-cuda-9.0-platform</artifactId>
                <version>${nd4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.nd4j</groupId>
                <artifactId>nd4j-cuda-10.0-platform</artifactId>
                <version>${nd4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.nd4j</groupId>
                <artifactId>nd4j-cuda-10.1-platform</artifactId>
                <version>${nd4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.nd4j</groupId>
                <artifactId>nd4j-cuda-10.2-platform</artifactId>
                <version>${nd4j.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- nd4j backend-->
        <dependency>
            <groupId>org.nd4j</groupId>
            <artifactId>nd4j-native-platform</artifactId>
            <version>${nd4j.version}</version>
        </dependency>

        <!-- ND4J backend. You need one in every DL4J project. Normally define artifactId as either "nd4j-native-platform" or "nd4j-cuda-9.2-platform" -->
        <dependency>
            <groupId>org.nd4j</groupId>
            <artifactId>${nd4j.backend}</artifactId>
            <version>${nd4j.version}</version>
        </dependency>

        <!--Uncomment to enable cudnn-->
        <dependency>
            <groupId>org.deeplearning4j</groupId>
            <artifactId>${dl4j.cuda.backend}</artifactId>
            <version>${dl4j.version}</version>
        </dependency>

        <!-- altenatively, use GPU /CUDA for training -->
        <!-- to use this, disable nd4j-native-platform and use this -->
        <!-- <dependency> -->
        <!--   <groupId>org.nd4j</groupId> -->
        <!--   <artifactId>nd4j-cuda-10.2-platform</artifactId> -->
        <!--   <version>${nd4j.version}</version> -->
        <!-- </dependency> -->

        <!--futher more enable cudnn when training using gpu -->
        <!-- <dependency> -->
        <!--   <groupId>org.deeplearning4j</groupId> -->
        <!--   <artifactId>deeplearning4j-cuda-10.2</artifactId> -->
        <!--   <version>${dl4j.version}</version> -->
        <!-- </dependency> -->

        <!-- deeplearning4j-core: contains main functionality and neural networks -->
        <dependency>
            <groupId>org.deeplearning4j</groupId>
            <artifactId>deeplearning4j-core</artifactId>
            <version>${dl4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.deeplearning4j</groupId>
            <artifactId>deeplearning4j-zoo</artifactId>
            <version>${dl4j.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.deeplearning4j/deeplearning4j-nn -->
        <dependency>
            <groupId>org.deeplearning4j</groupId>
            <artifactId>deeplearning4j-nn</artifactId>
            <version>${dl4j.version}</version>
        </dependency>

        <!--Used for Unzipping files in some of the examples-->
        <dependency>
            <groupId>net.lingala.zip4j</groupId>
            <artifactId>zip4j</artifactId>
            <version>${zip4j.version}</version>
        </dependency>

        <!--        &lt;!&ndash; For running opencv and ffmpeg libraries &ndash;&gt;-->
<!--        <dependency>-->
<!--            <groupId>org.bytedeco</groupId>-->
<!--            <artifactId>javacv</artifactId>-->
<!--            <version>${javacv.version}</version>-->
<!--        </dependency>-->

        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.deeplearning4j</groupId>
            <artifactId>deeplearning4j-ui-model</artifactId>
            <version>1.0.0-beta6</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.deeplearning4j</groupId>
            <artifactId>deeplearning4j-vertx</artifactId>
            <version>1.0.0-beta6</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>jfree</groupId>
            <artifactId>jfreechart</artifactId>
            <version>1.0.13</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>OpenJFX</id>
            <activation>
                <jdk>1.7</jdk>
            </activation>

            <build>
                <plugins>
                    <!-- Maven compiler plugin: compile for Java 8 -->
<!--                    <plugin>-->
<!--                        <groupId>org.apache.maven.plugins</groupId>-->
<!--                        <artifactId>maven-compiler-plugin</artifactId>-->
<!--                        <version>3.5.1</version>-->
<!--                        <configuration>-->
<!--                            <source>${java.version}</source>-->
<!--                            <target>${java.version}</target>-->
<!--                        </configuration>-->
<!--                    </plugin>-->


                    <!--
                    Maven shade plugin configuration:
                    To build uber jar (with all the dependencies)
                    Example way of doing in command line:
                    mvn clean package
                    cd target
                    java -cp global.skymind-1.0-SNAPSHOT-bin.jar ai.certifai.MyFirstDL4JProject
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-shade-plugin</artifactId>
                        <version>${maven-shade-plugin.version}</version>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>bin</shadedClassifierName>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>org/datanucleus/**</exclude>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>

                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>shade</goal>
                                </goals>
                                <configuration>
                                    <transformers>
                                        <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                            <resource>reference.conf</resource>
                                        </transformer>
                                        <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                        </transformer>
                                    </transformers>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>